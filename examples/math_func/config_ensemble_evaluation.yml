controls:
  - name: point_0
    type: generic_control
    perturbation_magnitude: 0.01
    min: -2.0
    max: 2.0
    variables:
      - name: x
        initial_guess: 0.0
      - name: y
        initial_guess: 0.0
      - name: z
        initial_guess: 0.0

objective_functions:
  - name: distance

optimization:
  backend: scipy
  algorithm: slsqp
  max_function_evaluations: 3
  speculative: true

experimental:
  plan:
    # The first step in this plan runs an evaluation of the full ensemble,
    # writing results to the `results` file. It then runs the `set_realizations`
    # workflow job, implicitly adding an -o option, set to the value of
    # `output`. This job adjusts the realization weights, setting the weights of
    # faulty realizations to zero, and writes those to the `output` file. That
    # file is read back and the realization weights in the optimization
    # configuration are set accordingly. The following optimization step uses
    # the updated configuration, thereby not taking faulty realizations into
    # account.
    - ensemble_evaluation:
        results: r{{ configpath }}/ensemble_evaluation.json
    - workflow_job:
        job: set_realizations -i r{{ configpath }}/ensemble_evaluation.json
        output: r{{ configpath }}/realization_weights.json
    - optimizer: {}

install_workflow_jobs:
  - name: set_realizations
    source: jobs/SET_REALIZATIONS

install_jobs:
  - name: distance3
    source: jobs/DISTANCE3

model:
  realizations: [0, 1]

forward_model:
  # Note the --realization argument, this "breaks" the distance calculation for
  # realizations > 0, so without fixing them in the optimization plan, the
  # optimization will fail to give the correct answer.
  - distance3 --point-file point_0.json --realization r{{realization}}
    --target 0.5 0.5 0.5
    --out distance_0

environment:
  output_folder: distance_output
  simulation_folder: sim_output
  random_seed: 999
