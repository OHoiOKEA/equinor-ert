// AnalysisModule
EXPORT_UNBOUND(analysis_module_alloc, void*, const char*);
EXPORT(analysis_module_free, void, analysis_module_type*);
EXPORT(analysis_module_set_var, bool, analysis_module_type*, const char*, const char*);
EXPORT(analysis_module_get_table_name, const char*, analysis_module_type*);
EXPORT(analysis_module_get_name, const char*, analysis_module_type*);
EXPORT(analysis_module_check_option, bool, analysis_module_type*, analysis_module_options_enum);
EXPORT(analysis_module_has_var, bool, analysis_module_type*, const char*);
EXPORT(analysis_module_get_double, double, analysis_module_type*, const char*);
EXPORT(analysis_module_get_int, int, analysis_module_type*, const char*);
EXPORT(analysis_module_get_bool, bool, analysis_module_type*, const char*);
EXPORT(analysis_module_get_ptr, const char*, analysis_module_type*, const char*);
EXPORT(analysis_module_init_update, void, analysis_module_type*, bool_vector_type*, bool_vector_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, rng_type*);
EXPORT(analysis_module_updateA, void, analysis_module_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, void*, rng_type*);
EXPORT(analysis_module_initX, void, analysis_module_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, rng_type*);
// ConfigError
EXPORT(config_error_free, void, config_error_type*);
EXPORT(config_error_count, int, config_error_type*);
EXPORT(config_error_iget, const char*, config_error_type*, int);
// ConfigPathElm
EXPORT(config_path_elm_free, void, config_path_elm_type*);
EXPORT(config_path_elm_get_relpath, const char*, config_path_elm_type*);
EXPORT(config_path_elm_get_abspath, const char*, config_path_elm_type*);
// ContentNode
EXPORT(config_content_node_iget, const char*, content_node_type*, int);
EXPORT(config_content_node_get_size, int, content_node_type*);
EXPORT(config_content_node_get_full_string, const char*, content_node_type*, const char*);
EXPORT(config_content_node_iget_type, config_content_type_enum, content_node_type*, int);
EXPORT(config_content_node_iget_as_abspath, const char*, content_node_type*, int);
EXPORT(config_content_node_iget_as_relpath, const char*, content_node_type*, int);
EXPORT(config_content_node_iget_as_int, int, content_node_type*, int);
EXPORT(config_content_node_iget_as_double, double, content_node_type*, int);
EXPORT(config_content_node_iget_as_path, const char*, content_node_type*, int);
EXPORT(config_content_node_iget_as_bool, bool, content_node_type*, int);
EXPORT(config_content_node_iget_as_isodate, time_t, content_node_type*, int);
// ContentItem
EXPORT_UNBOUND(config_content_item_alloc, void*, schema_item_type*, void*);
EXPORT(config_content_item_get_size, int, content_item_type*);
EXPORT_REF(config_content_item_iget_node, content_node_type*, content_item_type*, int);
EXPORT(config_content_item_free, void, content_item_type*);
// ConfigContent
EXPORT_UNBOUND(config_content_alloc, void*, const char*);
EXPORT(config_content_free, void, config_content_type*);
EXPORT(config_content_is_valid, bool, config_content_type*);
EXPORT(config_content_has_item, bool, config_content_type*, const char*);
EXPORT_REF(config_content_get_item, content_item_type*, config_content_type*, const char*);
EXPORT_REF(config_content_get_errors, config_error_type*, config_content_type*);
EXPORT_REF(config_content_get_warnings, stringlist_type*, config_content_type*);
EXPORT(config_content_get_config_path, const char*, config_content_type*);
EXPORT_REF(config_content_add_path_elm, config_path_elm_type*, config_content_type*, const char*);
EXPORT(config_content_add_define, void, config_content_type*, const char*, const char*);
EXPORT(config_content_get_size, int, config_content_type*);
EXPORT(config_content_alloc_keys, stringlist_type*, config_content_type*);
// ConfigParser
EXPORT_UNBOUND(config_alloc, void*, );
EXPORT_REF(config_add_schema_item, schema_item_type*, config_parser_type*, const char*, bool);
EXPORT(config_free, void, config_parser_type*);
EXPORT(config_parse, config_content_type*, config_parser_type*, const char*, const char*, const char*, const char*, hash_type*, config_unrecognized_enum, bool);
EXPORT(config_get_schema_size, int, config_parser_type*);
EXPORT_REF(config_get_schema_item, schema_item_type*, config_parser_type*, const char*);
EXPORT(config_has_schema_item, bool, config_parser_type*, const char*);
EXPORT(config_parser_add_key_values, bool, config_parser_type*, config_content_type*, const char*, stringlist_type*, config_path_elm_type*, const char*, config_unrecognized_enum);
EXPORT(config_validate, void, config_parser_type*, config_content_type*);
// ConfigSettings
EXPORT_UNBOUND(config_settings_alloc, void*, const char*);
EXPORT(config_settings_free, void, config_settings_type*);
EXPORT(config_settings_add_setting, bool, config_settings_type*, const char*, config_content_type_enum, const char*);
EXPORT(config_settings_add_double_setting, void, config_settings_type*, const char*, double);
EXPORT(config_settings_add_int_setting, void, config_settings_type*, const char*, int);
EXPORT(config_settings_add_string_setting, void, config_settings_type*, const char*, const char*);
EXPORT(config_settings_add_bool_setting, void, config_settings_type*, const char*, bool);
EXPORT(config_settings_has_key, bool, config_settings_type*, const char*);
EXPORT(config_settings_get_value_type, config_content_type_enum, config_settings_type*, const char*);
EXPORT(config_settings_init_parser, void, config_settings_type*, config_parser_type*, bool);
EXPORT(config_settings_apply, void, config_settings_type*, config_content_type*);
EXPORT(config_settings_alloc_keys, stringlist_type*, config_settings_type*);
EXPORT(config_settings_get_value, const char*, config_settings_type*, const char*);
EXPORT(config_settings_get_int_value, int, config_settings_type*, const char*);
EXPORT(config_settings_get_double_value, double, config_settings_type*, const char*);
EXPORT(config_settings_get_bool_value, bool, config_settings_type*, const char*);
EXPORT(config_settings_set_value, bool, config_settings_type*, const char*, const char*);
EXPORT(config_settings_set_int_value, bool, config_settings_type*, const char*, int);
EXPORT(config_settings_set_double_value, bool, config_settings_type*, const char*, double);
EXPORT(config_settings_set_bool_value, bool, config_settings_type*, const char*, bool);
// SchemaItem
EXPORT_UNBOUND(config_schema_item_alloc, void*, const char*, bool);
EXPORT(config_schema_item_free, void, schema_item_type*);
EXPORT(config_schema_item_iget_type, config_content_type_enum, schema_item_type*, int);
EXPORT(config_schema_item_iset_type, void, schema_item_type*, int, config_content_type_enum);
EXPORT(config_schema_item_set_argc_minmax, void, schema_item_type*, int, int);
EXPORT(config_schema_item_add_indexed_alternative, void, schema_item_type*, int, const char*);
EXPORT(config_schema_item_set_deprecated, void, schema_item_type*, const char*);
// ErtTemplate
EXPORT(ert_template_free, void, ert_template_type*);
EXPORT(ert_template_get_template_file, const char*, ert_template_type*);
EXPORT(ert_template_get_target_file, const char*, ert_template_type*);
EXPORT_REF(ert_template_get_arg_list, subst_list_type*, ert_template_type*);
// AnalysisConfig
EXPORT_UNBOUND(analysis_config_alloc, void*, config_content_type*);
EXPORT_UNBOUND(analysis_config_alloc_load, void*, const char*);
EXPORT_UNBOUND(analysis_config_alloc_full, void*, double, bool, int, const char*, double, bool, bool, double, int, int);
EXPORT(analysis_config_add_module_copy, void, analysis_config_type*, const char*, const char*);
EXPORT(analysis_config_free, void, analysis_config_type*);
EXPORT(analysis_config_get_rerun, int, analysis_config_type*);
EXPORT(analysis_config_set_rerun, void, analysis_config_type*, bool);
EXPORT(analysis_config_get_rerun_start, int, analysis_config_type*);
EXPORT(analysis_config_set_rerun_start, void, analysis_config_type*, int);
EXPORT(analysis_config_get_log_path, const char*, analysis_config_type*);
EXPORT(analysis_config_set_log_path, void, analysis_config_type*, const char*);
EXPORT_REF(analysis_config_get_iter_config, analysis_iter_config_type*, analysis_config_type*);
EXPORT(analysis_config_get_max_runtime, int, analysis_config_type*);
EXPORT(analysis_config_set_max_runtime, void, analysis_config_type*, int);
EXPORT(analysis_config_get_stop_long_running, bool, analysis_config_type*);
EXPORT(analysis_config_set_stop_long_running, void, analysis_config_type*, bool);
EXPORT(analysis_config_get_active_module_name, const char*, analysis_config_type*);
EXPORT_REF(analysis_config_get_module, analysis_module_type*, analysis_config_type*, const char*);
EXPORT(analysis_config_select_module, bool, analysis_config_type*, const char*);
EXPORT(analysis_config_has_module, bool, analysis_config_type*, const char*);
EXPORT(analysis_config_get_alpha, double, analysis_config_type*);
EXPORT(analysis_config_set_alpha, void, analysis_config_type*, double);
EXPORT(analysis_config_get_std_cutoff, double, analysis_config_type*);
EXPORT(analysis_config_set_std_cutoff, void, analysis_config_type*, double);
EXPORT(analysis_config_set_global_std_scaling, void, analysis_config_type*, double);
EXPORT(analysis_config_get_global_std_scaling, double, analysis_config_type*);
EXPORT(analysis_config_get_min_realisations, int, analysis_config_type*);
// AnalysisIterConfig
EXPORT_UNBOUND(analysis_iter_config_alloc, void*, );
EXPORT_UNBOUND(analysis_iter_config_alloc_full, void*, const char*, int, int);
EXPORT(analysis_iter_config_free, void, analysis_iter_config_type*);
EXPORT(analysis_iter_config_set_num_iterations, void, analysis_iter_config_type*, int);
EXPORT(analysis_iter_config_get_num_iterations, int, analysis_iter_config_type*);
EXPORT(analysis_iter_config_get_num_retries_per_iteration, int, analysis_iter_config_type*);
EXPORT(analysis_iter_config_num_iterations_set, bool, analysis_iter_config_type*);
EXPORT(analysis_iter_config_set_case_fmt, void, analysis_iter_config_type*, const char*);
EXPORT(analysis_iter_config_get_case_fmt, const char*, analysis_iter_config_type*);
EXPORT(analysis_iter_config_case_fmt_set, bool, analysis_iter_config_type*);
// EclConfig
EXPORT_UNBOUND(ecl_config_alloc, void*, config_content_type*);
EXPORT_UNBOUND(ecl_config_alloc_full, void*, bool, const char*, ecl_grid_type*, const char*, stringlist_type*, time_t, const char*);
EXPORT(ecl_config_free, void, ecl_config_type*);
EXPORT(ecl_config_get_data_file, const char*, ecl_config_type*);
EXPORT(ecl_config_set_data_file, void, ecl_config_type*, const char*);
EXPORT(ecl_config_validate_data_file, ui_return_type*, ecl_config_type*, const char*);
EXPORT(ecl_config_get_gridfile, const char*, ecl_config_type*);
EXPORT(ecl_config_set_grid, void, ecl_config_type*, const char*);
EXPORT(ecl_config_validate_grid, ui_return_type*, ecl_config_type*, const char*);
EXPORT_REF(ecl_config_get_grid, ecl_grid_type*, ecl_config_type*);
EXPORT(ecl_config_get_refcase_name, const char*, ecl_config_type*);
EXPORT_REF(ecl_config_get_refcase, ecl_sum_type*, ecl_config_type*);
EXPORT(ecl_config_load_refcase, void, ecl_config_type*, const char*);
EXPORT(ecl_config_validate_refcase, ui_return_type*, ecl_config_type*, const char*);
EXPORT(ecl_config_has_refcase, bool, ecl_config_type*);
EXPORT(ecl_config_get_depth_unit, const char*, ecl_config_type*);
EXPORT(ecl_config_get_pressure_unit, const char*, ecl_config_type*);
EXPORT(ecl_config_active, bool, ecl_config_type*);
EXPORT(ecl_config_get_last_history_restart, int, ecl_config_type*);
EXPORT(ecl_config_get_end_date, time_t, ecl_config_type*);
EXPORT(ecl_config_get_num_cpu, int, ecl_config_type*);
// EnkfFs
EXPORT_UNBOUND(enkf_fs_mount, void*, const char*);
EXPORT(enkf_fs_sync, void, enkf_fs_type*);
EXPORT_UNBOUND(enkf_fs_exists, bool, const char*);
EXPORT_UNBOUND(enkf_fs_disk_version, int, const char*);
EXPORT_UNBOUND(enkf_fs_update_disk_version, bool, const char*, int, int);
EXPORT(enkf_fs_decref, int, enkf_fs_type*);
EXPORT(enkf_fs_incref, int, enkf_fs_type*);
EXPORT(enkf_fs_get_refcount, int, enkf_fs_type*);
EXPORT(enkf_fs_get_case_name, const char*, enkf_fs_type*);
EXPORT(enkf_fs_is_read_only, bool, enkf_fs_type*);
EXPORT(enkf_fs_is_running, bool, enkf_fs_type*);
EXPORT(enkf_fs_fsync, void, enkf_fs_type*);
EXPORT_UNBOUND(enkf_fs_create_fs, enkf_fs_type*, const char*, enkf_fs_type_enum, void*, bool);
EXPORT_REF(enkf_fs_get_time_map, time_map_type*, enkf_fs_type*);
EXPORT_REF(enkf_fs_get_state_map, state_map_type*, enkf_fs_type*);
EXPORT_REF(enkf_fs_get_summary_key_set, summary_key_set_type*, enkf_fs_type*);
// EnkfFsManager
EXPORT(enkf_main_get_fs_ref, enkf_fs_type*, enkf_fs_manager_type*);
EXPORT(enkf_main_set_fs, void, enkf_fs_manager_type*, enkf_fs_type*, const char*);
EXPORT(enkf_main_alloc_caselist, stringlist_type*, enkf_fs_manager_type*);
EXPORT(enkf_main_is_initialized, bool, enkf_fs_manager_type*, bool_vector_type*);
EXPORT(enkf_main_case_is_initialized, bool, enkf_fs_manager_type*, const char*, bool_vector_type*);
EXPORT(enkf_main_initialize_from_scratch, void, enkf_fs_manager_type*, stringlist_type*, ert_run_context_type*);
EXPORT(enkf_main_init_case_from_existing, void, enkf_fs_manager_type*, enkf_fs_type*, int, enkf_fs_type*);
EXPORT(enkf_main_init_current_case_from_existing_custom, void, enkf_fs_manager_type*, enkf_fs_type*, int, stringlist_type*, bool_vector_type*);
EXPORT(enkf_main_init_current_case_from_existing, void, enkf_fs_manager_type*, enkf_fs_type*, int);
EXPORT(enkf_main_alloc_readonly_state_map, state_map_type*, enkf_fs_manager_type*, const char*);
EXPORT(enkf_main_alloc_readonly_time_map, time_map_type*, enkf_fs_manager_type*, const char*);
// EnKFMain
// _RealEnKFMain
EXPORT_UNBOUND(enkf_main_alloc, void*, res_config_type*, bool, bool);
EXPORT(enkf_main_free, void, enkf_main_type*);
EXPORT_REF(enkf_main_get_queue_config, queue_config_type*, enkf_main_type*);
EXPORT(enkf_main_get_ensemble_size, int, enkf_main_type*);
EXPORT_REF(enkf_main_get_ensemble_config, ens_config_type*, enkf_main_type*);
EXPORT_REF(enkf_main_get_model_config, model_config_type*, enkf_main_type*);
EXPORT_REF(enkf_main_get_local_config, local_config_type*, enkf_main_type*);
EXPORT_REF(enkf_main_get_analysis_config, analysis_config_type*, enkf_main_type*);
EXPORT_REF(enkf_main_get_site_config, site_config_type*, enkf_main_type*);
EXPORT_REF(enkf_main_get_ecl_config, ecl_config_type*, enkf_main_type*);
EXPORT(enkf_main_get_schedule_prediction_file, const char*, enkf_main_type*);
EXPORT_REF(enkf_main_get_data_kw, subst_list_type*, enkf_main_type*);
EXPORT(enkf_main_clear_data_kw, void, enkf_main_type*);
EXPORT(enkf_main_add_data_kw, void, enkf_main_type*, const char*, const char*);
EXPORT(enkf_main_resize_ensemble, void, enkf_main_type*, int);
EXPORT_REF(enkf_main_get_obs, enkf_obs_type*, enkf_main_type*);
EXPORT(enkf_main_load_obs, bool, enkf_main_type*, const char*, bool);
EXPORT_REF(enkf_main_get_templates, ert_templates_type*, enkf_main_type*);
EXPORT(enkf_main_get_site_config_file, const char*, enkf_main_type*);
EXPORT(enkf_main_get_history_length, int, enkf_main_type*);
EXPORT(enkf_main_get_observation_count, int, enkf_main_type*, const char*);
EXPORT(enkf_main_have_obs, bool, enkf_main_type*);
EXPORT_REF(enkf_main_iget_state, enkf_state_type*, enkf_main_type*, int);
EXPORT_REF(enkf_main_get_workflow_list, ert_workflow_list_type*, enkf_main_type*);
EXPORT_REF(enkf_main_get_hook_manager, hook_manager_type*, enkf_main_type*);
EXPORT(enkf_main_get_user_config_file, const char*, enkf_main_type*);
EXPORT(enkf_main_get_mount_root, const char*, enkf_main_type*);
EXPORT(enkf_main_export_field_with_fs, bool, enkf_main_type*, const char*, const char*, bool_vector_type*, enkf_field_file_format_enum, int, enkf_fs_manager_type*);
EXPORT(enkf_main_load_from_forward_model_from_gui, int, enkf_main_type*, int, bool_vector_type*, enkf_fs_type*);
EXPORT(enkf_main_load_from_run_context_from_gui, int, enkf_main_type*, ert_run_context_type*, enkf_fs_type*);
EXPORT(enkf_main_create_run_path, void, enkf_main_type*, ert_run_context_type*);
EXPORT(enkf_main_alloc_ert_run_context_ENSEMBLE_EXPERIMENT, ert_run_context_type*, enkf_main_type*, enkf_fs_type*, bool_vector_type*, int);
EXPORT_REF(enkf_main_get_runpath_list, runpath_list_type*, enkf_main_type*);
EXPORT(enkf_main_alloc_runpath_list, runpath_list_type*, enkf_main_type*);
EXPORT(enkf_main_add_node, void, enkf_main_type*, enkf_config_node_type*);
EXPORT_REF(enkf_main_get_res_config, res_config_type*, enkf_main_type*);
EXPORT(enkf_main_init_run, void, enkf_main_type*, ert_run_context_type*);
EXPORT_REF(enkf_main_get_shared_rng, rng_type*, enkf_main_type*);
// EnkfObs
EXPORT_UNBOUND(enkf_obs_alloc, void*, history_type*, time_map_type*, ecl_grid_type*, ecl_sum_type*, ens_config_type*);
EXPORT(enkf_obs_free, void, enkf_obs_type*);
EXPORT(enkf_obs_get_size, int, enkf_obs_type*);
EXPORT(enkf_obs_is_valid, bool, enkf_obs_type*);
EXPORT(enkf_obs_load, void, enkf_obs_type*, const char*, double);
EXPORT(enkf_obs_clear, void, enkf_obs_type*);
EXPORT(enkf_obs_alloc_typed_keylist, stringlist_type*, enkf_obs_type*, enkf_obs_impl_type);
EXPORT(enkf_obs_alloc_matching_keylist, stringlist_type*, enkf_obs_type*, const char*);
EXPORT(enkf_obs_has_key, bool, enkf_obs_type*, const char*);
EXPORT(enkf_obs_get_type, enkf_obs_impl_type, enkf_obs_type*, const char*);
EXPORT_REF(enkf_obs_get_vector, obs_vector_type*, enkf_obs_type*, const char*);
EXPORT_REF(enkf_obs_iget_vector, obs_vector_type*, enkf_obs_type*, int);
EXPORT(enkf_obs_iget_obs_time, time_t, enkf_obs_type*, int);
EXPORT(enkf_obs_add_obs_vector, void, enkf_obs_type*, obs_vector_type*);
EXPORT(enkf_obs_get_obs_and_measure_data, void, enkf_obs_type*, enkf_fs_type*, local_obsdata_type*, int_vector_type*, meas_data_type*, obs_data_type*);
EXPORT(enkf_obs_alloc_all_active_local_obs, local_obsdata_type*, enkf_obs_type*, const char*);
EXPORT(enkf_obs_local_scale_std, void, enkf_obs_type*, local_obsdata_type*, double);
// EnKFState
EXPORT(enkf_state_free, void, enkf_state_type*);
EXPORT_REF(enkf_state_get_ensemble_config, ens_config_type*, enkf_state_type*);
EXPORT(enkf_state_initialize, void, enkf_state_type*, enkf_fs_type*, stringlist_type*, enkf_init_mode_enum);
EXPORT_UNBOUND(enkf_state_complete_forward_modelOK, bool, res_config_type*, run_arg_type*);
EXPORT_UNBOUND(enkf_state_complete_forward_model_EXIT_handler__, bool, run_arg_type*);
// EnsembleConfig
EXPORT_UNBOUND(ensemble_config_alloc, void*, config_content_type*, ecl_grid_type*, ecl_sum_type*);
EXPORT_UNBOUND(ensemble_config_alloc_full, void*, const char*);
EXPORT(ensemble_config_free, void, ens_config_type*);
EXPORT(ensemble_config_has_key, bool, ens_config_type*, const char*);
EXPORT(ensemble_config_get_size, int, ens_config_type*);
EXPORT_REF(ensemble_config_get_node, enkf_config_node_type*, ens_config_type*, const char*);
EXPORT(ensemble_config_alloc_keylist, stringlist_type*, ens_config_type*);
EXPORT_REF(ensemble_config_add_summary, enkf_config_node_type*, ens_config_type*, const char*, int);
EXPORT_REF(ensemble_config_add_gen_kw, enkf_config_node_type*, ens_config_type*, const char*);
EXPORT_REF(ensemble_config_add_field, enkf_config_node_type*, ens_config_type*, const char*, ecl_grid_type*);
EXPORT(ensemble_config_alloc_keylist_from_var_type, stringlist_type*, ens_config_type*, enkf_var_type_enum);
EXPORT(ensemble_config_alloc_keylist_from_impl_type, stringlist_type*, ens_config_type*, ert_impl_type_enum);
EXPORT(ensemble_config_add_node, void, ens_config_type*, enkf_config_node_type*);
EXPORT_REF(ensemble_config_get_summary_key_matcher, summary_key_matcher_type*, ens_config_type*);
EXPORT(ensemble_config_get_trans_table, void*, ens_config_type*);
EXPORT(ensemble_config_init_SUMMARY_full, void, ens_config_type*, const char*, ecl_sum_type*);
// ErtRunContext
EXPORT_UNBOUND(ert_run_context_alloc, void*, enkf_run_mode_enum, enkf_init_mode_enum, enkf_fs_type*, enkf_fs_type*, bool_vector_type*, path_fmt_type*, const char*, subst_list_type*, int);
EXPORT_UNBOUND(ert_run_context_alloc_ENSEMBLE_EXPERIMENT, ert_run_context_type*, enkf_fs_type*, bool_vector_type*, path_fmt_type*, const char*, subst_list_type*, int);
EXPORT_UNBOUND(ert_run_context_alloc_SMOOTHER_RUN, ert_run_context_type*, enkf_fs_type*, enkf_fs_type*, bool_vector_type*, path_fmt_type*, const char*, subst_list_type*, int);
EXPORT_UNBOUND(ert_run_context_alloc_SMOOTHER_UPDATE, ert_run_context_type*, enkf_fs_type*, enkf_fs_type*);
EXPORT_UNBOUND(ert_run_context_alloc_CASE_INIT, ert_run_context_type*, enkf_fs_type*, bool_vector_type*);
EXPORT_UNBOUND(ert_run_context_alloc_runpath_list, stringlist_type*, bool_vector_type*, path_fmt_type*, subst_list_type*, int);
EXPORT_UNBOUND(ert_run_context_alloc_runpath, const char*, int, path_fmt_type*, subst_list_type*, int);
EXPORT(ert_run_context_get_size, int, ert_run_context_type*);
EXPORT(ert_run_context_free, void, ert_run_context_type*);
EXPORT(ert_run_context_iactive, bool, ert_run_context_type*, int);
EXPORT_REF(ert_run_context_iget_arg, run_arg_type*, ert_run_context_type*, int);
EXPORT(ert_run_context_get_id, const char*, ert_run_context_type*);
EXPORT(ert_run_context_alloc_iactive, bool_vector_type*, ert_run_context_type*);
EXPORT(ert_run_context_get_iter, int, ert_run_context_type*);
EXPORT_REF(ert_run_context_get_update_target_fs, enkf_fs_type*, ert_run_context_type*);
EXPORT_REF(ert_run_context_get_sim_fs, enkf_fs_type*, ert_run_context_type*);
EXPORT(ert_run_context_get_init_mode, enkf_init_mode_enum, ert_run_context_type*);
EXPORT(ert_run_context_get_step1, int, ert_run_context_type*);
EXPORT(ert_run_context_deactivate_realization, void, ert_run_context_type*, int);
// ErtTemplates
EXPORT_UNBOUND(ert_templates_alloc, void*, subst_list_type*, config_content_type*);
EXPORT_UNBOUND(ert_templates_alloc_default, void*, subst_list_type*);
EXPORT(ert_templates_free, void, ert_templates_type*);
EXPORT_REF(ert_templates_alloc_list, stringlist_type*, ert_templates_type*);
EXPORT_REF(ert_templates_get_template, ert_template_type*, ert_templates_type*, const char*);
EXPORT(ert_templates_clear, void, ert_templates_type*);
EXPORT_REF(ert_templates_add_template, ert_template_type*, ert_templates_type*, const char*, const char*, const char*, const char*);
// ErtWorkflowList
EXPORT_UNBOUND(ert_workflow_list_alloc, void*, subst_list_type*, config_content_type*);
EXPORT_UNBOUND(ert_workflow_list_alloc_full, void*, subst_list_type*, workflow_joblist_type*);
EXPORT(ert_workflow_list_free, void, ert_workflow_list_type*);
EXPORT(ert_workflow_list_alloc_namelist, stringlist_type*, ert_workflow_list_type*);
EXPORT(ert_workflow_list_has_workflow, bool, ert_workflow_list_type*, const char*);
EXPORT_REF(ert_workflow_list_get_workflow, workflow_type*, ert_workflow_list_type*, const char*);
EXPORT_REF(ert_workflow_list_add_workflow, workflow_type*, ert_workflow_list_type*, const char*, const char*);
EXPORT_REF(ert_workflow_list_get_context, subst_list_type*, ert_workflow_list_type*);
EXPORT(ert_workflow_list_add_job, void, ert_workflow_list_type*, const char*, const char*);
EXPORT(ert_workflow_list_has_job, bool, ert_workflow_list_type*, const char*);
EXPORT_REF(ert_workflow_list_get_job, workflow_job_type*, ert_workflow_list_type*, const char*);
EXPORT(ert_workflow_list_get_job_names, stringlist_type*, ert_workflow_list_type*);
// ESUpdate
EXPORT(enkf_main_smoother_update, bool, es_update_type*, enkf_fs_type*, enkf_fs_type*);
// ForwardLoadContext
EXPORT_UNBOUND(forward_load_context_alloc, void*, run_arg_type*, bool, ecl_config_type*, const char*, stringlist_type*);
EXPORT(forward_load_context_select_step, void, forward_load_context_type*, int);
EXPORT(forward_load_context_get_load_step, int, forward_load_context_type*);
EXPORT(forward_load_context_free, void, forward_load_context_type*);
// HookManager
EXPORT_UNBOUND(hook_manager_alloc, void*, ert_workflow_list_type*, config_content_type*);
EXPORT_UNBOUND(hook_manager_alloc_full, void*, ert_workflow_list_type*, const char*);
EXPORT(hook_manager_free, void, hook_manager_type*);
EXPORT(hook_manager_get_runpath_list_file, const char*, hook_manager_type*);
EXPORT_REF(hook_manager_get_runpath_list, runpath_list_type*, hook_manager_type*);
EXPORT_REF(hook_manager_iget_hook_workflow, hook_workflow_type*, hook_manager_type*, int);
EXPORT(hook_manager_get_size, int, hook_manager_type*);
// HookWorkflow
EXPORT_REF(hook_workflow_get_workflow, workflow_type*, hook_workflow_type*);
EXPORT(hook_workflow_get_run_mode, hook_runtime_enum, hook_workflow_type*);
// LocalConfig
EXPORT(local_config_free, void, local_config_type*);
EXPORT(local_config_clear, void, local_config_type*);
EXPORT(local_config_clear_active, void, local_config_type*);
EXPORT_REF(local_config_alloc_ministep, local_ministep_type*, local_config_type*, const char*, analysis_module_type*);
EXPORT_UNBOUND(local_updatestep_add_ministep, void, local_updatestep_type*, local_ministep_type*);
EXPORT(local_config_alloc_obsdata, void, local_config_type*, const char*);
EXPORT(local_config_alloc_dataset, void, local_config_type*, const char*);
EXPORT(local_config_has_obsdata, bool, local_config_type*, const char*);
EXPORT(local_config_has_dataset, bool, local_config_type*, const char*);
EXPORT_REF(local_config_get_updatestep, local_updatestep_type*, local_config_type*);
EXPORT_REF(local_config_get_ministep, local_ministep_type*, local_config_type*, const char*);
EXPORT_REF(local_config_get_obsdata, local_obsdata_type*, local_config_type*, const char*);
EXPORT_REF(local_config_alloc_obsdata_copy, local_obsdata_type*, local_config_type*, const char*, const char*);
EXPORT_REF(local_config_get_dataset, local_dataset_type*, local_config_type*, const char*);
EXPORT_REF(local_config_alloc_dataset_copy, local_dataset_type*, local_config_type*, const char*, const char*);
EXPORT(local_config_summary_fprintf, void, local_config_type*, const char*);
// LocalDataset
EXPORT(local_dataset_get_size, int, local_dataset_type*);
EXPORT(local_dataset_has_key, bool, local_dataset_type*, const char*);
EXPORT(local_dataset_alloc_keys, stringlist_type*, local_dataset_type*);
EXPORT(local_dataset_free, void, local_dataset_type*);
EXPORT(local_dataset_get_name, const char*, local_dataset_type*);
EXPORT(local_dataset_add_node, void, local_dataset_type*, const char*);
EXPORT(local_dataset_del_node, void, local_dataset_type*, const char*);
EXPORT_REF(local_dataset_get_or_create_row_scaling, row_scaling_type*, local_dataset_type*, const char*);
EXPORT_REF(local_dataset_get_node_active_list, active_list_type*, local_dataset_type*, const char*);
// LocalMinistep
EXPORT(local_ministep_add_obsdata_node, void, local_ministep_type*, local_obsdata_node_type*);
EXPORT_REF(local_ministep_get_obsdata, local_obsdata_type*, local_ministep_type*);
EXPORT_REF(local_ministep_get_dataset, local_dataset_type*, local_ministep_type*, const char*);
EXPORT_REF(local_ministep_get_obs_data, obs_data_type*, local_ministep_type*);
EXPORT(local_ministep_has_dataset, bool, local_ministep_type*, const char*);
EXPORT(local_ministep_free, void, local_ministep_type*);
EXPORT(local_ministep_add_obsdata, void, local_ministep_type*, local_obsdata_type*);
EXPORT(local_ministep_add_dataset, void, local_ministep_type*, local_dataset_type*);
EXPORT(local_ministep_get_name, const char*, local_ministep_type*);
EXPORT(local_ministep_get_num_dataset, int, local_ministep_type*);
// LocalObsdata
EXPORT_UNBOUND(local_obsdata_alloc, void*, const char*);
EXPORT(local_obsdata_free, void, local_obsdata_type*);
EXPORT(local_obsdata_get_size, int, local_obsdata_type*);
EXPORT(local_obsdata_has_node, bool, local_obsdata_type*, const char*);
EXPORT(local_obsdata_add_node, bool, local_obsdata_type*, local_obsdata_node_type*);
EXPORT(local_obsdata_del_node, void, local_obsdata_type*, const char*);
EXPORT(local_dataset_clear, void, local_obsdata_type*);
EXPORT(local_obsdata_get_name, const char*, local_obsdata_type*);
EXPORT_REF(local_obsdata_iget, local_obsdata_node_type*, local_obsdata_type*, int);
EXPORT_REF(local_obsdata_get, local_obsdata_node_type*, local_obsdata_type*, const char*);
EXPORT_REF(local_obsdata_get_copy_node_active_list, active_list_type*, local_obsdata_type*, const char*);
EXPORT_REF(local_obsdata_get_node_active_list, active_list_type*, local_obsdata_type*, const char*);
// LocalObsdataNode
EXPORT_UNBOUND(local_obsdata_node_alloc, void*, const char*, bool);
EXPORT(local_obsdata_node_free, void, local_obsdata_node_type*);
EXPORT(local_obsdata_node_get_key, const char*, local_obsdata_node_type*);
EXPORT(local_obsdata_node_add_tstep, void, local_obsdata_node_type*, int);
EXPORT(local_obsdata_node_tstep_active, bool, local_obsdata_node_type*, int);
EXPORT(local_obsdata_node_all_timestep_active, bool, local_obsdata_node_type*);
EXPORT(local_obsdata_node_set_all_timestep_active, void, local_obsdata_node_type*, bool);
EXPORT_REF(local_obsdata_node_get_active_list, active_list_type*, local_obsdata_node_type*);
// LocalUpdateStep
EXPORT(local_updatestep_get_num_ministep, int, local_updatestep_type*);
EXPORT_REF(local_updatestep_iget_ministep, local_ministep_type*, local_updatestep_type*, int);
EXPORT(local_updatestep_free, void, local_updatestep_type*);
EXPORT(local_updatestep_get_name, const char*, local_updatestep_type*);
// LogConfig
EXPORT_UNBOUND(log_config_alloc, void*, config_content_type*);
EXPORT_UNBOUND(log_config_alloc_load, void*, const char*);
EXPORT_UNBOUND(log_config_alloc_full, void*, const char*, message_level_enum);
EXPORT(log_config_free, void, log_config_type*);
EXPORT(log_config_get_log_file, const char*, log_config_type*);
EXPORT(log_config_get_log_level, message_level_enum, log_config_type*);
// MeasBlock
EXPORT_UNBOUND(meas_block_alloc, void*, const char*, bool_vector_type*, int);
EXPORT(meas_block_free, void, meas_block_type*);
EXPORT(meas_block_get_active_ens_size, int, meas_block_type*);
EXPORT(meas_block_get_total_ens_size, int, meas_block_type*);
EXPORT(meas_block_get_total_obs_size, int, meas_block_type*);
EXPORT(meas_block_iget, double, meas_block_type*, int, int);
EXPORT(meas_block_iset, void, meas_block_type*, int, int, double);
EXPORT(meas_block_iget_ens_mean, double, meas_block_type*, int);
EXPORT(meas_block_iget_ens_std, double, meas_block_type*, int);
EXPORT(meas_block_iens_active, bool, meas_block_type*, int);
// MeasData
EXPORT_UNBOUND(meas_data_alloc, void*, bool_vector_type*);
EXPORT(meas_data_free, void, meas_data_type*);
EXPORT(meas_data_get_active_obs_size, int, meas_data_type*);
EXPORT(meas_data_get_active_ens_size, int, meas_data_type*);
EXPORT(meas_data_get_total_ens_size, int, meas_data_type*);
EXPORT(meas_data_get_num_blocks, int, meas_data_type*);
EXPORT(meas_data_has_block, bool, meas_data_type*, const char*);
EXPORT_REF(meas_data_get_block, meas_block_type*, meas_data_type*, const char*);
EXPORT(meas_data_allocS, matrix_type*, meas_data_type*);
EXPORT_REF(meas_data_add_block, meas_block_type*, meas_data_type*, const char*, int, int);
EXPORT_REF(meas_data_iget_block, meas_block_type*, meas_data_type*, int);
EXPORT_UNBOUND(enkf_analysis_deactivate_std_zero, void, obs_data_type*, meas_data_type*);
// ModelConfig
EXPORT_UNBOUND(model_config_alloc, void*, config_content_type*, const char*, ext_joblist_type*, int, ecl_sum_type*);
EXPORT_UNBOUND(model_config_alloc_full, void*, int, int, const char*, const char*, const char*, const char*, forward_model_type*, const char*, time_map_type*, const char*, const char*, history_source_enum, ext_joblist_type*, ecl_sum_type*);
EXPORT(model_config_free, void, model_config_type*);
EXPORT_REF(model_config_get_forward_model, forward_model_type*, model_config_type*);
EXPORT(model_config_get_max_internal_submit, int, model_config_type*);
EXPORT(model_config_get_runpath_as_char, const char*, model_config_type*);
EXPORT(model_config_select_runpath, bool, model_config_type*, const char*);
EXPORT(model_config_set_runpath, void, model_config_type*, const char*);
EXPORT(model_config_get_enspath, const char*, model_config_type*);
EXPORT(model_config_get_history_source, history_source_enum, model_config_type*);
EXPORT(model_config_select_history, bool, model_config_type*, history_source_enum, ecl_sum_type*);
EXPORT(model_config_has_history, bool, model_config_type*);
EXPORT(model_config_get_gen_kw_export_name, const char*, model_config_type*);
EXPORT(model_config_runpath_requires_iter, bool, model_config_type*);
EXPORT(model_config_get_jobname_fmt, const char*, model_config_type*);
EXPORT_REF(model_config_get_runpath_fmt, path_fmt_type*, model_config_type*);
EXPORT(model_config_get_num_realizations, int, model_config_type*);
EXPORT(model_config_get_obs_config_file, const char*, model_config_type*);
EXPORT(model_config_get_data_root, const char*, model_config_type*);
EXPORT(model_config_get_external_time_map, void, model_config_type*);
// ObsBlock
EXPORT_UNBOUND(obs_block_alloc, void*, const char*, int, matrix_type*, bool, double);
EXPORT(obs_block_free, void, obs_block_type*);
EXPORT(obs_block_get_size, int, obs_block_type*);
EXPORT(obs_block_get_active_size, int, obs_block_type*);
EXPORT(obs_block_iset, void, obs_block_type*, int, double, double);
EXPORT(obs_block_iget_value, double, obs_block_type*, int);
EXPORT(obs_block_iget_std, double, obs_block_type*, int);
EXPORT(obs_block_get_key, const char*, obs_block_type*);
EXPORT(obs_block_iget_is_active, bool, obs_block_type*, int);
// ObsData
EXPORT_UNBOUND(obs_data_alloc, void*, double);
EXPORT(obs_data_free, void, obs_data_type*);
EXPORT(obs_data_get_total_size, int, obs_data_type*);
EXPORT(obs_data_scale, void, obs_data_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*, matrix_type*);
EXPORT(obs_data_scale_matrix, void, obs_data_type*, matrix_type*);
EXPORT(obs_data_scale_Rmatrix, void, obs_data_type*, matrix_type*);
EXPORT(obs_data_iget_value, double, obs_data_type*, int);
EXPORT(obs_data_iget_std, double, obs_data_type*, int);
EXPORT_REF(obs_data_add_block, obs_block_type*, obs_data_type*, const char*, int, matrix_type*, bool);
EXPORT(obs_data_allocdObs, matrix_type*, obs_data_type*);
EXPORT(obs_data_allocR, matrix_type*, obs_data_type*);
EXPORT(obs_data_allocD, matrix_type*, obs_data_type*, matrix_type*, matrix_type*);
EXPORT(obs_data_allocE, matrix_type*, obs_data_type*, rng_type*, int);
EXPORT_REF(obs_data_iget_block, obs_block_type*, obs_data_type*, int);
EXPORT(obs_data_get_num_blocks, int, obs_data_type*);
// QueueConfig
EXPORT(queue_config_free, void, queue_config_type*);
EXPORT_UNBOUND(queue_config_alloc_load, void*, const char*);
EXPORT_UNBOUND(queue_config_alloc_full, void*, const char*, bool, int, int, queue_driver_enum);
EXPORT_UNBOUND(queue_config_alloc, void*, config_content_type*);
EXPORT(queue_config_alloc_local_copy, queue_config_type*, queue_config_type*);
EXPORT(queue_config_has_job_script, bool, queue_config_type*);
EXPORT(queue_config_get_job_script, const char*, queue_config_type*);
EXPORT(queue_config_get_max_submit, int, queue_config_type*);
EXPORT(queue_config_get_queue_system, const char*, queue_config_type*);
EXPORT_REF(queue_config_get_queue_driver, driver_type*, queue_config_type*, const char*);
EXPORT(queue_config_get_num_cpu, int, queue_config_type*);
EXPORT_UNBOUND(queue_config_lsf_queue_name, const char*, );
EXPORT_UNBOUND(queue_config_lsf_server, const char*, );
EXPORT_UNBOUND(queue_config_lsf_resource, const char*, );
EXPORT_UNBOUND(queue_config_lsf_driver_name, const char*, );
// ResConfig
EXPORT(res_config_free, void, res_config_type*);
EXPORT_UNBOUND(res_config_alloc_full, void*, const char*, const char*, subst_config_type*, site_config_type*, rng_config_type*, analysis_config_type*, ert_workflow_list_type*, hook_manager_type*, ert_templates_type*, ecl_config_type*, ens_config_type*, model_config_type*, log_config_type*, queue_config_type*);
EXPORT_REF_UNBOUND(res_config_alloc_user_content, config_content_type*, const char*, config_parser_type*);
EXPORT(res_config_get_user_config_file, const char*, res_config_type*);
EXPORT(res_config_get_config_directory, const char*, res_config_type*);
EXPORT_REF(res_config_get_site_config, site_config_type*, res_config_type*);
EXPORT_REF(res_config_get_analysis_config, analysis_config_type*, res_config_type*);
EXPORT_REF(res_config_get_subst_config, subst_config_type*, res_config_type*);
EXPORT_REF(res_config_get_model_config, model_config_type*, res_config_type*);
EXPORT_REF(res_config_get_ecl_config, ecl_config_type*, res_config_type*);
EXPORT_REF(res_config_get_ensemble_config, ens_config_type*, res_config_type*);
EXPORT_REF(res_config_get_hook_manager, hook_manager_type*, res_config_type*);
EXPORT_REF(res_config_get_workflow_list, ert_workflow_list_type*, res_config_type*);
EXPORT_REF(res_config_get_rng_config, rng_config_type*, res_config_type*);
EXPORT_REF(res_config_get_templates, ert_templates_type*, res_config_type*);
EXPORT_REF(res_config_get_log_config, log_config_type*, res_config_type*);
EXPORT_REF(res_config_get_queue_config, queue_config_type*, res_config_type*);
EXPORT_UNBOUND(res_config_init_config_parser, void, config_parser_type*);
// RNGConfig
EXPORT_UNBOUND(rng_config_alloc, void*, config_content_type*);
EXPORT_UNBOUND(rng_config_alloc_full, void*, const char*);
EXPORT(rng_config_free, void, rng_config_type*);
EXPORT(rng_config_get_type, rng_alg_type_enum, rng_config_type*);
EXPORT(rng_config_get_random_seed, const char*, rng_config_type*);
// RowScaling
EXPORT_UNBOUND(row_scaling_alloc, void*, );
EXPORT(row_scaling_free, void, row_scaling_type*);
EXPORT(row_scaling_get_size, int, row_scaling_type*);
EXPORT(row_scaling_iset, double, row_scaling_type*, int, double);
EXPORT(row_scaling_iget, double, row_scaling_type*, int);
EXPORT(row_scaling_clamp, double, row_scaling_type*, double);
EXPORT(row_scaling_assign_double, void, row_scaling_type*, const double*, int);
EXPORT(row_scaling_assign_float, void, row_scaling_type*, const float*, int);
// RunArg
EXPORT_UNBOUND(run_arg_alloc_ENSEMBLE_EXPERIMENT, run_arg_type*, const char*, enkf_fs_type*, int, int, const char*, const char*, subst_list_type*);
EXPORT(run_arg_free, void, run_arg_type*);
EXPORT(run_arg_get_queue_index_safe, int, run_arg_type*);
EXPORT(run_arg_set_queue_index, void, run_arg_type*, int);
EXPORT(run_arg_is_submitted, bool, run_arg_type*);
EXPORT(run_arg_get_run_id, const char*, run_arg_type*);
EXPORT(run_arg_get_geo_id, int, run_arg_type*);
EXPORT(run_arg_set_geo_id, void, run_arg_type*, int);
EXPORT(run_arg_get_runpath, const char*, run_arg_type*);
EXPORT(run_arg_get_iter, int, run_arg_type*);
EXPORT(run_arg_get_iens, int, run_arg_type*);
EXPORT(run_arg_get_run_status, int, run_arg_type*);
EXPORT(run_arg_get_job_name, const char*, run_arg_type*);
// RunpathList
EXPORT_UNBOUND(runpath_list_alloc, void*, const char*);
EXPORT(runpath_list_free, void, runpath_list_type*);
EXPORT(runpath_list_add, void, runpath_list_type*, int, int, const char*, const char*);
EXPORT(runpath_list_clear, void, runpath_list_type*);
EXPORT(runpath_list_size, int, runpath_list_type*);
EXPORT(runpath_list_iget_iens, int, runpath_list_type*, int);
EXPORT(runpath_list_iget_iter, int, runpath_list_type*, int);
EXPORT(runpath_list_iget_runpath, const char*, runpath_list_type*, int);
EXPORT(runpath_list_iget_basename, const char*, runpath_list_type*, int);
EXPORT(runpath_list_fprintf, void, runpath_list_type*);
EXPORT(runpath_list_load, bool, runpath_list_type*);
EXPORT(runpath_list_get_export_file, const char*, runpath_list_type*);
EXPORT(runpath_list_set_export_file, void, runpath_list_type*, const char*);
// SiteConfig
EXPORT_UNBOUND(site_config_alloc, void*, config_content_type*);
EXPORT_UNBOUND(site_config_alloc_full, void*, ext_joblist_type*, env_varlist_type*, int);
EXPORT_UNBOUND(site_config_alloc_load_user_config, void*, const char*);
EXPORT(site_config_free, void, site_config_type*);
EXPORT_REF(site_config_get_installed_jobs, ext_joblist_type*, site_config_type*);
EXPORT(site_config_get_license_root_path, const char*, site_config_type*);
EXPORT(site_config_set_license_root_path, void, site_config_type*, const char*);
EXPORT_UNBOUND(site_config_get_location, const char*, );
EXPORT(site_config_get_config_file, const char*, site_config_type*);
EXPORT(site_config_get_umask, int, site_config_type*);
// StateMap
EXPORT_UNBOUND(state_map_alloc, void*, );
EXPORT(state_map_fread, bool, state_map_type*, const char*);
EXPORT(state_map_fwrite, void, state_map_type*, const char*);
EXPORT(state_map_equal, bool, state_map_type*, state_map_type*);
EXPORT(state_map_free, void, state_map_type*);
EXPORT(state_map_get_size, int, state_map_type*);
EXPORT(state_map_iget, realisation_state_enum, state_map_type*, int);
EXPORT(state_map_iset, void, state_map_type*, int, realisation_state_enum);
EXPORT(state_map_select_matching, void, state_map_type*, bool_vector_type*, realisation_state_enum, bool);
EXPORT(state_map_is_readonly, bool, state_map_type*);
EXPORT_UNBOUND(state_map_legal_transition, bool, realisation_state_enum, realisation_state_enum);
// SubstConfig
EXPORT_UNBOUND(subst_config_alloc, void*, config_content_type*);
EXPORT_UNBOUND(subst_config_alloc_full, void*, subst_list_type*);
EXPORT(subst_config_free, void, subst_config_type*);
EXPORT_REF(subst_config_get_subst_list, subst_list_type*, subst_config_type*);
EXPORT_UNBOUND(ecl_util_get_num_cpu, int, const char*);
// SummaryKeyMatcher
EXPORT_UNBOUND(summary_key_matcher_alloc, void*, );
EXPORT(summary_key_matcher_free, void, summary_key_matcher_type*);
EXPORT(summary_key_matcher_get_size, int, summary_key_matcher_type*);
EXPORT(summary_key_matcher_add_summary_key, void, summary_key_matcher_type*, const char*);
EXPORT(summary_key_matcher_match_summary_key, bool, summary_key_matcher_type*, const char*);
EXPORT(summary_key_matcher_get_keys, stringlist_type*, summary_key_matcher_type*);
EXPORT(summary_key_matcher_summary_key_is_required, bool, summary_key_matcher_type*, const char*);
// SummaryKeySet
EXPORT_UNBOUND(summary_key_set_alloc, void*, );
EXPORT_UNBOUND(summary_key_set_alloc_from_file, void*, const char*, bool);
EXPORT(summary_key_set_free, void, summary_key_set_type*);
EXPORT(summary_key_set_get_size, int, summary_key_set_type*);
EXPORT(summary_key_set_add_summary_key, bool, summary_key_set_type*, const char*);
EXPORT(summary_key_set_has_summary_key, bool, summary_key_set_type*, const char*);
EXPORT(summary_key_set_alloc_keys, stringlist_type*, summary_key_set_type*);
EXPORT(summary_key_set_is_read_only, bool, summary_key_set_type*);
EXPORT(summary_key_set_fwrite, void, summary_key_set_type*, const char*);
// ActiveList
EXPORT_UNBOUND(active_list_alloc, void*, );
EXPORT(active_list_free, void, active_list_type*);
EXPORT(active_list_add_index, void, active_list_type*, int);
EXPORT(active_list_get_active_size, int, active_list_type*, int);
EXPORT(active_list_get_mode, active_mode_enum, active_list_type*);
// EnkfConfigNode
EXPORT_UNBOUND(enkf_config_node_alloc, enkf_config_node_type*, enkf_var_type_enum, ert_impl_type_enum, bool, const char*, const char*, const char*, const char*, void*);
EXPORT_UNBOUND(enkf_config_node_alloc_GEN_DATA_everest, enkf_config_node_type*, const char*, const char*, int_vector_type*);
EXPORT_UNBOUND(enkf_config_node_alloc_summary, enkf_config_node_type*, const char*, load_fail_type);
EXPORT_UNBOUND(enkf_config_node_alloc_field, enkf_config_node_type*, const char*, ecl_grid_type*, void*, bool);
EXPORT(enkf_config_node_get_ref, void*, enkf_config_node_type*);
EXPORT(enkf_config_node_get_impl_type, ert_impl_type_enum, enkf_config_node_type*);
EXPORT(enkf_config_node_get_enkf_outfile, const char*, enkf_config_node_type*);
EXPORT(enkf_config_node_get_min_std_file, const char*, enkf_config_node_type*);
EXPORT(enkf_config_node_get_enkf_infile, const char*, enkf_config_node_type*);
EXPORT(enkf_config_node_get_init_file_fmt, const char*, enkf_config_node_type*);
EXPORT(enkf_config_node_get_var_type, enkf_var_type_enum, enkf_config_node_type*);
EXPORT(enkf_config_node_get_key, const char*, enkf_config_node_type*);
EXPORT_REF(enkf_config_node_get_obs_keys, stringlist_type*, enkf_config_node_type*);
EXPORT(enkf_config_node_free, void, enkf_config_node_type*);
EXPORT(enkf_config_node_use_forward_init, bool, enkf_config_node_type*);
EXPORT_UNBOUND(enkf_config_node_alloc_GEN_PARAM_full, enkf_config_node_type*, const char*, bool, gen_data_file_format_type, gen_data_file_format_type, const char*, const char*, const char*, const char*, const char*);
EXPORT_UNBOUND(enkf_config_node_alloc_GEN_DATA_full, enkf_config_node_type*, const char*, const char*, gen_data_file_format_type, int_vector_type*, const char*, const char*, const char*, const char*);
EXPORT_UNBOUND(enkf_config_node_alloc_GEN_KW_full, enkf_config_node_type*, const char*, bool, const char*, const char*, const char*, const char*, const char*, const char*);
EXPORT_UNBOUND(enkf_config_node_alloc_SURFACE_full, enkf_config_node_type*, const char*, bool, const char*, const char*, const char*, const char*);
EXPORT_UNBOUND(enkf_config_node_new_container, enkf_config_node_type*, const char*);
EXPORT(enkf_config_node_update_container, void, enkf_config_node_type*, enkf_config_node_type*);
EXPORT(enkf_config_node_container_size, int, enkf_config_node_type*);
EXPORT(enkf_config_node_iget_container_key, const char*, enkf_config_node_type*, int);
EXPORT(enkf_config_node_update_parameter_field, void, enkf_config_node_type*, const char*, const char*, const char*, enkf_truncation_type_enum, double, double, const char*, const char*);
EXPORT(enkf_config_node_update_general_field, void, enkf_config_node_type*, const char*, const char*, const char*, const char*, enkf_truncation_type_enum, double, double, const char*, const char*, const char*);
// ExtParamConfig
EXPORT_UNBOUND(ext_param_config_alloc, void*, const char*, stringlist_type*);
EXPORT(ext_param_config_get_data_size, int, ext_param_config_type*);
EXPORT(ext_param_config_iget_key, const char*, ext_param_config_type*, int);
EXPORT(ext_param_config_free, void, ext_param_config_type*);
EXPORT(ext_param_config_has_key, bool, ext_param_config_type*, const char*);
EXPORT(ext_param_config_get_key_index, int, ext_param_config_type*, const char*);
EXPORT(ext_param_config_ikey_get_suffix_count, int, ext_param_config_type*, int);
EXPORT(ext_param_config_ikey_iget_suffix, const char*, ext_param_config_type*, int, int);
EXPORT(ext_param_config_ikey_set_suffixes, void, ext_param_config_type*, int, stringlist_type*);
// FieldConfig
EXPORT_UNBOUND(field_config_alloc_empty, void*, const char*, ecl_grid_type*, void*, bool);
EXPORT(field_config_free, void, field_config_type*);
EXPORT(field_config_get_type, field_type_enum, field_config_type*);
EXPORT(field_config_get_truncation_mode, int, field_config_type*);
EXPORT(field_config_get_truncation_min, double, field_config_type*);
EXPORT(field_config_get_truncation_max, double, field_config_type*);
EXPORT(field_config_get_init_transform_name, const char*, field_config_type*);
EXPORT(field_config_get_output_transform_name, const char*, field_config_type*);
EXPORT(field_config_ijk_active, bool, field_config_type*, int, int, int);
EXPORT(field_config_get_nx, int, field_config_type*);
EXPORT(field_config_get_ny, int, field_config_type*);
EXPORT(field_config_get_nz, int, field_config_type*);
EXPORT_REF(field_config_get_grid, ecl_grid_type*, field_config_type*);
EXPORT(field_config_get_data_size_from_grid, int, field_config_type*);
EXPORT_UNBOUND(field_config_default_export_format, enkf_field_file_format_enum, const char*);
EXPORT_UNBOUND(field_config_guess_file_type, enkf_field_file_format_enum, const char*);
// GenDataConfig
EXPORT_UNBOUND(gen_data_config_alloc_GEN_DATA_result, void*, const char*, gen_data_file_format_type);
EXPORT(gen_data_config_free, void, gen_data_config_type*);
EXPORT(gen_data_config_get_output_format, gen_data_file_format_type, gen_data_config_type*);
EXPORT(gen_data_config_get_input_format, gen_data_file_format_type, gen_data_config_type*);
EXPORT(gen_data_config_get_template_file, const char*, gen_data_config_type*);
EXPORT(gen_data_config_get_template_key, const char*, gen_data_config_type*);
EXPORT(gen_data_config_get_initial_size, int, gen_data_config_type*);
EXPORT(gen_data_config_has_report_step, bool, gen_data_config_type*, int);
EXPORT(gen_data_config_get_data_size__, int, gen_data_config_type*, int);
EXPORT(gen_data_config_get_key, const char*, gen_data_config_type*);
EXPORT_REF(gen_data_config_get_active_mask, bool_vector_type*, gen_data_config_type*);
EXPORT(gen_data_config_num_report_step, int, gen_data_config_type*);
EXPORT(gen_data_config_iget_report_step, int, gen_data_config_type*, int);
// GenKwConfig
EXPORT(gen_kw_config_free, void, gen_kw_config_type*);
EXPORT_UNBOUND(gen_kw_config_alloc_empty, void*, const char*, const char*);
EXPORT(gen_kw_config_get_template_file, const char*, gen_kw_config_type*);
EXPORT(gen_kw_config_set_template_file, void, gen_kw_config_type*, const char*);
EXPORT(gen_kw_config_get_parameter_file, const char*, gen_kw_config_type*);
EXPORT(gen_kw_config_set_parameter_file, void, gen_kw_config_type*, const char*);
EXPORT(gen_kw_config_alloc_name_list, stringlist_type*, gen_kw_config_type*);
EXPORT(gen_kw_config_should_use_log_scale, bool, gen_kw_config_type*, int);
EXPORT(gen_kw_config_get_key, const char*, gen_kw_config_type*);
EXPORT(gen_kw_config_get_tag_fmt, const char*, gen_kw_config_type*);
EXPORT(gen_kw_config_get_data_size, int, gen_kw_config_type*);
EXPORT(gen_kw_config_iget_name, const char*, gen_kw_config_type*, int);
EXPORT(gen_kw_config_iget_function_type, const char*, gen_kw_config_type*, int);
EXPORT_REF(gen_kw_config_iget_function_parameter_names, stringlist_type*, gen_kw_config_type*, int);
EXPORT_REF(gen_kw_config_iget_function_parameter_values, double_vector_type*, gen_kw_config_type*, int);
// SummaryConfig
EXPORT_UNBOUND(summary_config_alloc, void*, const char*, load_fail_type);
EXPORT(summary_config_free, void, summary_config_type*);
EXPORT(summary_config_get_var, const char*, summary_config_type*);
// Field
EXPORT(field_free, void, field_type*);
EXPORT(field_get_size, int, field_type*);
EXPORT(field_ijk_get_double, double, field_type*, int, int, int);
EXPORT(field_iget_double, double, field_type*, int);
EXPORT(field_export, void, field_type*, const char*, fortio_type*, enkf_field_file_format_enum, bool, const char*);
// EnkfNode
EXPORT_UNBOUND(enkf_node_alloc, void*, enkf_config_node_type*);
EXPORT_UNBOUND(enkf_node_alloc_private_container, void*, enkf_config_node_type*);
EXPORT(enkf_node_free, void, enkf_node_type*);
EXPORT(enkf_node_get_key, const char*, enkf_node_type*);
EXPORT(enkf_node_value_ptr, void*, enkf_node_type*);
EXPORT(enkf_node_try_load, bool, enkf_node_type*, enkf_fs_type*, node_id_type*);
EXPORT(enkf_node_store, bool, enkf_node_type*, enkf_fs_type*, node_id_type*);
EXPORT(enkf_node_get_impl_type, ert_impl_type_enum, enkf_node_type*);
EXPORT(enkf_node_ecl_write, void, enkf_node_type*, const char*, void*, int);
// ExtParam
EXPORT_UNBOUND(ext_param_alloc, void*, ext_param_config_type*);
EXPORT(ext_param_free, void, ext_param_type*);
EXPORT(ext_param_iset, void, ext_param_type*, int, double);
EXPORT(ext_param_key_set, void, ext_param_type*, const char*, double);
EXPORT(ext_param_key_suffix_set, void, ext_param_type*, const char*, const char*, double);
EXPORT(ext_param_iget, double, ext_param_type*, int);
EXPORT(ext_param_key_get, double, ext_param_type*, const char*);
EXPORT(ext_param_key_suffix_get, double, ext_param_type*, const char*, const char*);
EXPORT(ext_param_json_export, void, ext_param_type*, const char*);
EXPORT(ext_param_get_config, void*, ext_param_type*);
// GenData
EXPORT_UNBOUND(gen_data_alloc, void*, );
EXPORT(gen_data_free, void, gen_data_type*);
EXPORT(gen_data_get_size, int, gen_data_type*);
EXPORT(gen_data_iget_double, double, gen_data_type*, int);
EXPORT(gen_data_export, void, gen_data_type*, const char*, gen_data_file_format_type, fortio_type*);
EXPORT(gen_data_export_data, void, gen_data_type*, double_vector_type*);
// GenKw
EXPORT_UNBOUND(gen_kw_alloc, void*, gen_kw_config_type*);
EXPORT(gen_kw_free, void, gen_kw_config_type*);
EXPORT(gen_kw_write_export_file, void, gen_kw_type*, const char*);
EXPORT(gen_kw_ecl_write_template, void, gen_kw_type*, const char*);
EXPORT(gen_kw_data_iget, double, gen_kw_type*, int, bool);
EXPORT(gen_kw_data_iset, void, gen_kw_type*, int, double);
EXPORT(gen_kw_data_set_vector, void, gen_kw_type*, double_vector_type*);
EXPORT(gen_kw_data_get, double, gen_kw_type*, const char*, bool);
EXPORT(gen_kw_data_set, void, gen_kw_type*, const char*, double);
EXPORT(gen_kw_data_size, int, gen_kw_type*);
EXPORT(gen_kw_data_has_key, bool, gen_kw_type*, const char*);
EXPORT(gen_kw_ecl_write, void, gen_kw_type*, const char*, const char*, void*);
EXPORT(gen_kw_get_name, const char*, gen_kw_type*, int);
// Summary
EXPORT_UNBOUND(summary_alloc, void*, summary_config_type*);
EXPORT(summary_free, void, summary_type*);
EXPORT(summary_get, double, summary_type*, int);
EXPORT(summary_set, void, summary_type*, int, double);
EXPORT(summary_length, int, summary_type*);
EXPORT_UNBOUND(summary_undefined_value, double, );
// BlockDataConfig
// BlockObservation
EXPORT_UNBOUND(block_obs_alloc, void*, const char*, block_data_config_type*, ecl_grid_type*);
EXPORT(block_obs_free, void, block_obs_type*);
EXPORT(block_obs_iget_i, int, block_obs_type*, int);
EXPORT(block_obs_iget_j, int, block_obs_type*, int);
EXPORT(block_obs_iget_k, int, block_obs_type*, int);
EXPORT(block_obs_get_size, int, block_obs_type*);
EXPORT(block_obs_iget_std, double, block_obs_type*, int);
EXPORT(block_obs_iget_std_scaling, double, block_obs_type*, int);
EXPORT(block_obs_update_std_scale, void, block_obs_type*, double, active_list_type*);
EXPORT(block_obs_iget_value, double, block_obs_type*, int);
EXPORT(block_obs_iget_depth, double, block_obs_type*, int);
EXPORT(block_obs_append_field_obs, void, block_obs_type*, int, int, int, double, double);
EXPORT(block_obs_append_summary_obs, void, block_obs_type*, int, int, int, double, double);
EXPORT(block_obs_iget_data, double, block_obs_type*, void*, int, node_id_type*);
// GenObservation
EXPORT_UNBOUND(gen_obs_alloc__, void*, gen_data_config_type*, const char*);
EXPORT(gen_obs_free, void, gen_obs_type*);
EXPORT(gen_obs_load_observation, void, gen_obs_type*, const char*);
EXPORT(gen_obs_set_scalar, void, gen_obs_type*, double, double);
EXPORT(gen_obs_iget_std, double, gen_obs_type*, int);
EXPORT(gen_obs_iget_value, double, gen_obs_type*, int);
EXPORT(gen_obs_iget_std_scaling, double, gen_obs_type*, int);
EXPORT(gen_obs_get_size, int, gen_obs_type*);
EXPORT(gen_obs_get_obs_index, int, gen_obs_type*, int);
EXPORT(gen_obs_load_data_index, void, gen_obs_type*, const char*);
EXPORT(gen_obs_attach_data_index, void, gen_obs_type*, int_vector_type*);
EXPORT(gen_obs_update_std_scale, void, gen_obs_type*, double, active_list_type*);
EXPORT(gen_obs_load_values, void, gen_obs_type*, int, const double*);
EXPORT(gen_obs_load_std, void, gen_obs_type*, int, const double*);
// ObsVector
EXPORT_UNBOUND(obs_vector_alloc, void*, enkf_obs_impl_type, const char*, enkf_config_node_type*, int);
EXPORT(obs_vector_free, void, obs_vector_type*);
EXPORT(obs_vector_get_state_kw, const char*, obs_vector_type*);
EXPORT(obs_vector_get_key, const char*, obs_vector_type*);
EXPORT(obs_vector_iget_node, void*, obs_vector_type*, int);
EXPORT(obs_vector_get_num_active, int, obs_vector_type*);
EXPORT(obs_vector_iget_active, bool, obs_vector_type*, int);
EXPORT(obs_vector_get_impl_type, enkf_obs_impl_type, obs_vector_type*);
EXPORT(obs_vector_install_node, void, obs_vector_type*, int, void*);
EXPORT(obs_vector_get_next_active_step, int, obs_vector_type*, int);
EXPORT(obs_vector_has_data, bool, obs_vector_type*, bool_vector_type*, enkf_fs_type*);
EXPORT_REF(obs_vector_get_config_node, enkf_config_node_type*, obs_vector_type*);
EXPORT(obs_vector_total_chi2, double, obs_vector_type*, enkf_fs_type*, int);
EXPORT(obs_vector_get_obs_key, const char*, obs_vector_type*);
EXPORT(obs_vector_alloc_local_node, local_obsdata_node_type*, obs_vector_type*);
// SummaryObservation
EXPORT_UNBOUND(summary_obs_alloc, void*, const char*, const char*, double, double, const char*, double);
EXPORT(summary_obs_free, void, summary_obs_type*);
EXPORT(summary_obs_get_value, double, summary_obs_type*);
EXPORT(summary_obs_get_std, double, summary_obs_type*);
EXPORT(summary_obs_get_std_scaling, double, summary_obs_type*);
EXPORT(summary_obs_get_summary_key, const char*, summary_obs_type*);
EXPORT(summary_obs_update_std_scale, void, summary_obs_type*, double, active_list_type*);
EXPORT(summary_obs_set_std_scale, void, summary_obs_type*, double);
// EnsemblePlotGenDataVector
EXPORT(enkf_plot_genvector_get_size, int, ensemble_plot_gen_data_vector_type*);
EXPORT(enkf_plot_genvector_iget, double, ensemble_plot_gen_data_vector_type*, int);
// EnsemblePlotGenKWVector
EXPORT(enkf_plot_gen_kw_vector_get_size, int, ensemble_plot_gen_kw_vector_type*);
EXPORT(enkf_plot_gen_kw_vector_iget, double, ensemble_plot_gen_kw_vector_type*, int);
// EnsemblePlotData
EXPORT_UNBOUND(enkf_plot_data_alloc, void*, enkf_config_node_type*);
EXPORT(enkf_plot_data_load, void, ensemble_plot_data_type*, enkf_fs_type*, const char*, bool_vector_type*);
EXPORT(enkf_plot_data_get_size, int, ensemble_plot_data_type*);
EXPORT_REF(enkf_plot_data_iget, ensemble_plot_data_vector_type*, ensemble_plot_data_type*, int);
EXPORT(enkf_plot_data_free, void, ensemble_plot_data_type*);
// EnsemblePlotDataVector
EXPORT(enkf_plot_tvector_size, int, ensemble_plot_data_vector_type*);
EXPORT(enkf_plot_tvector_iget_value, double, ensemble_plot_data_vector_type*, int);
EXPORT(enkf_plot_tvector_iget_time, time_t, ensemble_plot_data_vector_type*, int);
EXPORT(enkf_plot_tvector_iget_active, bool, ensemble_plot_data_vector_type*, int);
// EnsemblePlotGenData
EXPORT_UNBOUND(enkf_plot_gendata_alloc, void*, enkf_config_node_type*);
EXPORT(enkf_plot_gendata_get_size, int, ensemble_plot_gen_data_type*);
EXPORT(enkf_plot_gendata_load, void, ensemble_plot_gen_data_type*, enkf_fs_type*, int, bool_vector_type*);
EXPORT_REF(enkf_plot_gendata_iget, ensemble_plot_gen_data_vector_type*, ensemble_plot_gen_data_type*, int);
EXPORT_REF(enkf_plot_gendata_get_min_values, double_vector_type*, ensemble_plot_gen_data_type*);
EXPORT_REF(enkf_plot_gendata_get_max_values, double_vector_type*, ensemble_plot_gen_data_type*);
EXPORT(enkf_plot_gendata_free, void, ensemble_plot_gen_data_type*);
// EnsemblePlotGenKW
EXPORT_UNBOUND(enkf_plot_gen_kw_alloc, void*, enkf_config_node_type*);
EXPORT(enkf_plot_gen_kw_get_size, int, ensemble_plot_gen_kw_type*);
EXPORT(enkf_plot_gen_kw_load, void, ensemble_plot_gen_kw_type*, enkf_fs_type*, bool, int, bool_vector_type*);
EXPORT_REF(enkf_plot_gen_kw_iget, ensemble_plot_gen_kw_vector_type*, ensemble_plot_gen_kw_type*, int);
EXPORT(enkf_plot_gen_kw_iget_key, const char*, ensemble_plot_gen_kw_type*, int);
EXPORT(enkf_plot_gen_kw_get_keyword_count, int, ensemble_plot_gen_kw_type*);
EXPORT(enkf_plot_gen_kw_should_use_log_scale, bool, ensemble_plot_gen_kw_type*, int);
EXPORT(enkf_plot_gen_kw_free, void, ensemble_plot_gen_kw_type*);
// TimeMap
EXPORT_UNBOUND(time_map_alloc, void*, );
EXPORT(time_map_fread, bool, time_map_type*, const char*);
EXPORT(time_map_fwrite, void, time_map_type*, const char*);
EXPORT(time_map_fscanf, bool, time_map_type*, const char*);
EXPORT(time_map_iget_sim_days, double, time_map_type*, int);
EXPORT(time_map_iget, time_t, time_map_type*, int);
EXPORT(time_map_get_size, int, time_map_type*);
EXPORT(time_map_try_update, bool, time_map_type*, int, time_t);
EXPORT(time_map_is_strict, bool, time_map_type*);
EXPORT(time_map_set_strict, void, time_map_type*, bool);
EXPORT(time_map_lookup_time, int, time_map_type*, time_t);
EXPORT(time_map_lookup_time_with_tolerance, int, time_map_type*, time_t, int, int);
EXPORT(time_map_lookup_days, int, time_map_type*, double);
EXPORT(time_map_get_last_step, int, time_map_type*);
EXPORT(time_map_summary_upgrade107, void, time_map_type*, ecl_sum_type*);
EXPORT(time_map_free, void, time_map_type*);
// Driver
EXPORT_UNBOUND(queue_driver_alloc, void*, queue_driver_enum);
EXPORT(queue_driver_free, void, driver_type*);
EXPORT(queue_driver_set_option, void, driver_type*, const char*, const char*);
EXPORT(queue_driver_get_option, const char*, driver_type*, const char*);
EXPORT(queue_driver_free_job, void, driver_type*, job_type*);
EXPORT(queue_driver_get_status, job_status_type_enum, driver_type*, job_type*);
EXPORT(queue_driver_kill_job, void, driver_type*, job_type*);
EXPORT(queue_driver_get_max_running, int, driver_type*);
EXPORT(queue_driver_set_max_running, void, driver_type*, int);
EXPORT(queue_driver_get_name, const char*, driver_type*);
// EnvironmentVarlist
EXPORT_UNBOUND(env_varlist_alloc, void*, );
EXPORT(env_varlist_free, void, env_varlist_type*);
EXPORT(env_varlist_setenv, void, env_varlist_type*, const char*, const char*);
EXPORT(env_varlist_get_size, int, env_varlist_type*);
// ExtJob
EXPORT_UNBOUND(ext_job_fscanf_alloc, void*, const char*, const char*, bool, const char*, bool);
EXPORT(ext_job_free, void, ext_job_type*);
EXPORT(ext_job_get_help_text, const char*, ext_job_type*);
EXPORT(ext_job_get_name, const char*, ext_job_type*);
EXPORT(ext_job_set_private_args_from_string, void, ext_job_type*, const char*);
EXPORT(ext_job_is_private, int, ext_job_type*);
EXPORT(ext_job_get_config_file, const char*, ext_job_type*);
EXPORT(ext_job_set_config_file, void, ext_job_type*, const char*);
EXPORT(ext_job_get_stdin_file, const char*, ext_job_type*);
EXPORT(ext_job_set_stdin_file, void, ext_job_type*, const char*);
EXPORT(ext_job_get_stdout_file, const char*, ext_job_type*);
EXPORT(ext_job_set_stdout_file, void, ext_job_type*, const char*);
EXPORT(ext_job_get_stderr_file, const char*, ext_job_type*);
EXPORT(ext_job_set_stderr_file, void, ext_job_type*, const char*);
EXPORT(ext_job_get_target_file, const char*, ext_job_type*);
EXPORT(ext_job_set_target_file, void, ext_job_type*, const char*);
EXPORT(ext_job_get_executable, const char*, ext_job_type*);
EXPORT(ext_job_set_executable, void, ext_job_type*, const char*);
EXPORT(ext_job_get_error_file, const char*, ext_job_type*);
EXPORT(ext_job_get_start_file, const char*, ext_job_type*);
EXPORT(ext_job_get_max_running, int, ext_job_type*);
EXPORT(ext_job_set_max_running, void, ext_job_type*, int);
EXPORT(ext_job_get_max_running_minutes, int, ext_job_type*);
EXPORT(ext_job_set_max_running_minutes, void, ext_job_type*, int);
EXPORT(ext_job_get_min_arg, int, ext_job_type*);
EXPORT(ext_job_get_max_arg, int, ext_job_type*);
EXPORT(ext_job_iget_argtype, config_content_type_enum, ext_job_type*, int);
EXPORT_REF(ext_job_get_environment, string_hash_type*, ext_job_type*);
EXPORT(ext_job_add_environment, void, ext_job_type*, const char*, const char*);
EXPORT(ext_job_get_license_path, const char*, ext_job_type*);
EXPORT_REF(ext_job_get_arglist, stringlist_type*, ext_job_type*);
EXPORT(ext_job_set_args, void, ext_job_type*, stringlist_type*);
EXPORT_REF(ext_job_get_argvalues, stringlist_type*, ext_job_type*);
EXPORT(ext_job_clear_environment, void, ext_job_type*);
EXPORT(ext_job_save, void, ext_job_type*);
// ExtJoblist
EXPORT_UNBOUND(ext_joblist_alloc, void*, );
EXPORT(ext_joblist_free, void, ext_joblist_type*);
EXPORT_REF(ext_joblist_alloc_list, stringlist_type*, ext_joblist_type*);
EXPORT_REF(ext_joblist_get_job, ext_job_type*, ext_joblist_type*, const char*);
EXPORT(ext_joblist_del_job, int, ext_joblist_type*, const char*);
EXPORT(ext_joblist_has_job, int, ext_joblist_type*, const char*);
EXPORT(ext_joblist_add_job, void, ext_joblist_type*, const char*, ext_job_type*);
EXPORT_REF(ext_joblist_get_jobs, hash_type*, ext_joblist_type*);
EXPORT(ext_joblist_get_size, int, ext_joblist_type*);
// ForwardModel
EXPORT_UNBOUND(forward_model_alloc, void*, ext_joblist_type*);
EXPORT(forward_model_free, void, forward_model_type*);
EXPORT(forward_model_clear, void, forward_model_type*);
EXPORT_REF(forward_model_add_job, ext_job_type*, forward_model_type*, const char*);
EXPORT(forward_model_alloc_joblist, stringlist_type*, forward_model_type*);
EXPORT_REF(forward_model_iget_job, ext_job_type*, forward_model_type*, int);
EXPORT(forward_model_get_length, int, forward_model_type*);
EXPORT(forward_model_formatted_fprintf, void, forward_model_type*, const char*, const char*, const char*, subst_list_type*, int, env_varlist_type*);
// Job
// JobQueueNode
EXPORT_UNBOUND(job_queue_node_alloc_python, void*, const char*, const char*, const char*, int, stringlist_type*, int, const char*, const char*, const char*);
EXPORT(job_queue_node_free, void, job_queue_node_type*);
EXPORT(job_queue_node_submit_simple, job_submit_status_type_enum, job_queue_node_type*, driver_type*);
EXPORT(job_queue_node_kill_simple, bool, job_queue_node_type*, driver_type*);
EXPORT(job_queue_node_get_status, job_status_type_enum, job_queue_node_type*);
EXPORT(job_queue_node_update_status_simple, bool, job_queue_node_type*, driver_type*);
EXPORT(job_queue_node_set_status, void, job_queue_node_type*, job_status_type_enum);
EXPORT(job_queue_node_get_submit_attempt, int, job_queue_node_type*);
// JobQueue
EXPORT_UNBOUND(job_queue_alloc, void*, int, const char*, const char*, const char*);
EXPORT(job_queue_start_user_exit, bool, job_queue_type*);
EXPORT(job_queue_get_user_exit, bool, job_queue_type*);
EXPORT(job_queue_free, void, job_queue_type*);
EXPORT(job_queue_set_max_job_duration, void, job_queue_type*, int);
EXPORT(job_queue_get_max_job_duration, int, job_queue_type*);
EXPORT(job_queue_set_driver, void, job_queue_type*, void*);
EXPORT(job_queue_kill_job, bool, job_queue_type*, int);
EXPORT(job_queue_run_jobs_threaded, void, job_queue_type*, int, bool);
EXPORT(job_queue_iget_driver_data, void*, job_queue_type*, int);
EXPORT(job_queue_get_num_running, int, job_queue_type*);
EXPORT(job_queue_get_num_complete, int, job_queue_type*);
EXPORT(job_queue_get_num_waiting, int, job_queue_type*);
EXPORT(job_queue_get_num_pending, int, job_queue_type*);
EXPORT(job_queue_is_running, bool, job_queue_type*);
EXPORT(job_queue_submit_complete, void, job_queue_type*);
EXPORT(job_queue_iget_sim_start, time_t, job_queue_type*, int);
EXPORT(job_queue_get_active_size, int, job_queue_type*);
EXPORT(job_queue_set_pause_on, void, job_queue_type*);
EXPORT(job_queue_set_pause_off, void, job_queue_type*);
EXPORT(job_queue_get_max_submit, int, job_queue_type*);
EXPORT(job_queue_iget_job_status, job_status_type_enum, job_queue_type*, int);
EXPORT(job_queue_get_ok_file, const char*, job_queue_type*);
EXPORT(job_queue_get_exit_file, const char*, job_queue_type*);
EXPORT(job_queue_get_status_file, const char*, job_queue_type*);
EXPORT(job_queue_add_job_node, int, job_queue_type*, job_queue_node_type*);
// Workflow
EXPORT_UNBOUND(workflow_alloc, void*, const char*, workflow_joblist_type*);
EXPORT(workflow_free, void, workflow_type*);
EXPORT(workflow_size, int, workflow_type*);
EXPORT_REF(workflow_iget_job, workflow_job_type*, workflow_type*, int);
EXPORT_REF(workflow_iget_arguments, stringlist_type*, workflow_type*, int);
EXPORT(workflow_try_compile, bool, workflow_type*, subst_list_type*);
EXPORT_REF(workflow_get_last_error, config_error_type*, workflow_type*);
EXPORT(worflow_get_src_file, const char*, workflow_type*);
// WorkflowJob
EXPORT_UNBOUND(workflow_job_alloc, void*, const char*, bool);
EXPORT_UNBOUND(workflow_job_alloc_config, config_parser_type*, );
EXPORT_UNBOUND(workflow_job_config_alloc, workflow_job_type*, const char*, config_parser_type*, const char*);
EXPORT(workflow_job_free, void, workflow_job_type*);
EXPORT(workflow_job_get_name, const char*, workflow_job_type*);
EXPORT(workflow_job_internal, bool, workflow_job_type*);
EXPORT(workflow_job_is_internal_script, bool, workflow_job_type*);
EXPORT(workflow_job_get_internal_script_path, const char*, workflow_job_type*);
EXPORT(workflow_job_get_function, const char*, workflow_job_type*);
EXPORT(workflow_job_get_module, const char*, workflow_job_type*);
EXPORT(workflow_job_get_executable, const char*, workflow_job_type*);
EXPORT(workflow_job_get_min_arg, int, workflow_job_type*);
EXPORT(workflow_job_get_max_arg, int, workflow_job_type*);
EXPORT(workflow_job_iget_argtype, config_content_type_enum, workflow_job_type*, int);
// WorkflowJoblist
EXPORT_UNBOUND(workflow_joblist_alloc, void*, );
EXPORT(workflow_joblist_free, void, workflow_joblist_type*);
EXPORT(workflow_joblist_add_job, void, workflow_joblist_type*, workflow_job_type*);
EXPORT(workflow_joblist_add_job_from_file, bool, workflow_joblist_type*, const char*, const char*);
EXPORT(workflow_joblist_has_job, bool, workflow_joblist_type*, const char*);
EXPORT_REF(workflow_joblist_get_job, workflow_job_type*, workflow_joblist_type*, const char*);
// History
EXPORT_UNBOUND(history_alloc_from_refcase, void*, ecl_sum_type*, bool);
EXPORT_UNBOUND(history_get_source_string, const char*, history_source_enum);
EXPORT(history_free, void, history_type*);
// Matrix
EXPORT_UNBOUND(matrix_alloc, void*, int, int);
EXPORT_UNBOUND(matrix_alloc_identity, matrix_type*, int);
EXPORT(matrix_alloc_transpose, matrix_type*, matrix_type*);
EXPORT(matrix_inplace_transpose, void, matrix_type*);
EXPORT(matrix_alloc_copy, matrix_type*, matrix_type*);
EXPORT(matrix_alloc_sub_copy, matrix_type*, matrix_type*, int, int, int, int);
EXPORT(matrix_free, void, matrix_type*);
EXPORT(matrix_iget, double, matrix_type*, int, int);
EXPORT(matrix_iset, void, matrix_type*, int, int, double);
EXPORT(matrix_scalar_set, void, matrix_type*, double);
EXPORT(matrix_scale_column, void, matrix_type*, int, double);
EXPORT(matrix_scale_row, void, matrix_type*, int, double);
EXPORT_UNBOUND(matrix_copy_column, void, matrix_type*, matrix_type*, int, int);
EXPORT(matrix_get_rows, int, matrix_type*);
EXPORT(matrix_get_columns, int, matrix_type*);
EXPORT(matrix_equal, bool, matrix_type*, matrix_type*);
EXPORT(matrix_pretty_print, void, matrix_type*, const char*, const char*);
EXPORT(matrix_fprintf, void, matrix_type*, const char*, FILE*);
EXPORT(matrix_random_init, void, matrix_type*, rng_type*);
EXPORT(matrix_dump_csv, void, matrix_type*, const char*);
EXPORT_UNBOUND(matrix_alloc_matmul, matrix_type*, matrix_type*, matrix_type*);
// PathFormat
EXPORT_UNBOUND(path_fmt_alloc_directory_fmt, void*, const char*);
EXPORT(path_fmt_get_fmt, const char*, path_fmt_type*);
EXPORT(path_fmt_free, void, path_fmt_type*);
// SubstitutionList
EXPORT_UNBOUND(subst_list_alloc, void*, void*);
EXPORT(subst_list_free, void, subst_list_type*);
EXPORT(subst_list_get_size, int, subst_list_type*);
EXPORT(subst_list_iget_key, const char*, subst_list_type*, int);
EXPORT(subst_list_get_value, const char*, subst_list_type*, const char*);
EXPORT(subst_list_has_key, bool, subst_list_type*, const char*);
EXPORT(subst_list_get_doc_string, const char*, subst_list_type*, const char*);
EXPORT(subst_list_append_copy, void, subst_list_type*, const char*, const char*, const char*);
// UIReturn
EXPORT_UNBOUND(ui_return_alloc, void*, ui_return_status);
EXPORT(ui_return_free, void, ui_return_type*);
EXPORT(ui_return_get_status, ui_return_status, ui_return_type*);
EXPORT(ui_return_get_help, const char*, ui_return_type*);
EXPORT(ui_return_add_help, bool, ui_return_type*, const char*);
EXPORT(ui_return_add_error, bool, ui_return_type*, const char*);
EXPORT(ui_return_get_error_count, int, ui_return_type*);
EXPORT(ui_return_get_last_error, const char*, ui_return_type*);
EXPORT(ui_return_get_first_error, const char*, ui_return_type*);
EXPORT(ui_return_iget_error, const char*, ui_return_type*, int);
