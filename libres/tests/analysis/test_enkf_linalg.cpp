#include "catch2/catch.hpp"

#include "ert/analysis/enkf_linalg.hpp"

/**
 * Results generated by this equivalent implementation in numpy:
 *
 * import numpy as np
 * nrow = 2
 * ncol = 3
 *
 * S = np.ones((nrow, ncol))
 * S[0, 1] = 1.5
 * S[1, 0] = 2.5
 *
 * W = np.ones((nrow, ncol))
 * W[0, 1] = 1.3
 *
 * eig = np.array([2.0, 2.0, 3.0])
 *
 * X2 = (W.T @ S)
 * X2 = (np.sqrt(eig) * X2.T).T
 * X2
*/
matrix_type *test_enkf_linalg_genX2() {
    const int nrow = 2;
    const int ncol = 3;

    matrix_type *X2 = matrix_alloc(ncol, ncol);

    matrix_type *S = matrix_alloc(nrow, ncol);
    matrix_iset(S, 0, 0, 1.0);
    matrix_iset(S, 1, 0, 2.5);
    matrix_iset(S, 0, 1, 1.5);
    matrix_iset(S, 1, 1, 1.0);
    matrix_iset(S, 0, 2, 1.0);
    matrix_iset(S, 1, 2, 1.0);

    matrix_type *W = matrix_alloc(nrow, ncol);
    matrix_iset(W, 0, 0, 1.0);
    matrix_iset(W, 1, 0, 1.0);
    matrix_iset(W, 0, 1, 1.3);
    matrix_iset(W, 1, 1, 1.0);
    matrix_iset(W, 0, 2, 1.0);
    matrix_iset(W, 1, 2, 1.0);

    const double eig[ncol] = {2.0, 2.0, 3.0};

    enkf_linalg_genX2(X2, S, W, eig);

    matrix_free(S);
    matrix_free(W);

    return X2;
}

TEST_CASE("enkf_linalg_genX2", "[analysis]") {
    matrix_type *X2 = test_enkf_linalg_genX2();
    Eigen::MatrixXd &result = *X2;

    // first columns
    REQUIRE(result(0, 0) == Approx(4.94974747));
    REQUIRE(result(1, 0) == Approx(5.37401154));
    REQUIRE(result(2, 0) == Approx(6.06217783));
    // second column
    REQUIRE(result(0, 1) == Approx(3.53553391));
    REQUIRE(result(1, 1) == Approx(4.17193001));
    REQUIRE(result(2, 1) == Approx(4.33012702));
    // third column
    REQUIRE(result(0, 2) == Approx(2.82842712));
    REQUIRE(result(1, 2) == Approx(3.25269119));
    REQUIRE(result(2, 2) == Approx(3.46410162));

    matrix_free(X2);
}
