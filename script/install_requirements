#!/usr/bin/env python3
"""Generate requirements.txt files from pyproject.toml."""

import sys
import argparse
import subprocess
import json

from pathlib import Path

try:  # standard module since Python 3.11
    import tomllib as toml
except ImportError:
    try:  # available for older Python via pip
        import tomli as toml
    except ImportError:
        sys.exit("`tomli` required: `pip install tomli`")


def parse() -> argparse.Namespace:
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-k",
        "--keys",
        nargs='*',
        type=str,
        default=["dev", "test"],
        help="Keys from optional-dependencies section exported in requirements file",
    )

    return parser.parse_args()


def get_packages():
    res = subprocess.run(["pip", "list", "--format", "json"], capture_output=True)
    return {package["name"]: package["version"] for package in json.loads(res.stdout)}

def main():
    args = parse()

    script_pth = Path(__file__)
    repo_dir = script_pth.parent.parent
    import time

    req_fname = Path("requirements.txt")
    pyproject = toml.loads((repo_dir / "pyproject.toml").read_text())
    optional_dependencies = pyproject["project"]["optional-dependencies"]

    req = []
    for key in args.keys:
        if key in optional_dependencies:
            req += optional_dependencies[key]

    req_fname.write_text("\n".join(req) + "\n")

    # List of packages before installing dependencies
    backup_pkgs = get_packages()

    # Install the requirements
    subprocess.run(["pip", "install", "-r", f"{req_fname.name}"])

    # List of packages after installing dependencies
    new_pkgs = get_packages()

    changes = []
    for package, version in backup_pkgs.items():
        if new_pkgs[package] != version:
            changes.append(f"{package}: {version} => {new_pkgs[package]}")

    package_added = []
    for package, version in new_pkgs.items():
        if package not in backup_pkgs:
            package_added.append(f"{package}=={version}")

    if changes:
        changes = ["Unexpected packages changed:"] + changes
        sys.exit("\n".join(changes))

    if package_added:
        print("Added packages:")
        print("\n".join(package_added))

    # Remove the file
    req_fname.unlink(missing_ok=True)


if __name__ == "__main__":
    main()
