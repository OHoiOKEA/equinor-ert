name: Python package

on:
 push:
   branches:
     - main
     - 'version-**'
   tags: "*"
 pull_request:

env:
  ERT_SHOW_BACKTRACE: 1
  ECL_SKIP_SIGNAL: 1

jobs:
  build-test-cmake:
    name: CMake

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y valgrind
        
    - name: Install Conan
      run: |
        python3 -m pip install conan

    - name: Build libecl
      run: |
        git clone https://github.com/equinor/libecl
        mkdir libecl/build
        cmake -S libecl -B libecl/build -DCMAKE_BUILD_TYPE=RelWithDebInfo
        sudo cmake --build libecl/build --target install
        sudo rm -rf libecl

    - name: Build libres
      run: |
        mkdir cmake-build
        cmake -S libres -B cmake-build -DBUILD_TESTS=ON -DCOVERAGE=ON
        cmake --build cmake-build

    - name: Run tests
      run: |
        cd cmake-build
        export PATH=$PWD/bin:$PATH
        ctest --output-on-failure

    - name: Install gcovr
      run: |
        python3 -m pip install gcovr

    - name: generate coverage report
      run: |
        gcovr -r libres/ --exclude-directories ".*tests" cmake-build/ --xml -o cov.xml

    - name: Upload c coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: cov.xml

  build-wheels:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: './.github/actions/install_dependencies'
      with:
        os: ${{ matrix.os }}

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build Linux Wheel
      uses: docker://quay.io/pypa/manylinux2014_x86_64
      with:
        entrypoint: /github/workspace/ci/github/build_linux_wheel.sh
        args: ${{ matrix.python-version }}
      if: matrix.os == 'ubuntu-latest'

    - name: Build macOS Wheel
      run: pip wheel . --no-deps -w dist
      if: matrix.os == 'macos-latest'

    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }} Python ${{ matrix.python-version }} wheel
        path: dist/*

    - name: Install wheel and test dependencies
      run: |
        find . -name "*.whl" -exec pip install {} \;
        pip install -r dev-requirements.txt

    - name: Test Ubuntu
      if: matrix.os == 'ubuntu-latest'
      env:
        DISPLAY: ':99.0'
      run: |
        ci/github/start_herbstluftwm.sh &
        sleep 5
        pushd tests
        pytest -sv -n4 --dist=loadscope --durations=0

    - name: Test MacOS
      if: matrix.os == 'macos-latest' && contains(fromJSON('[3.6, 3.9]'), matrix.python-version)
      run: |
        pushd tests
        pytest -sv -n4 --durations=0

    - name: Test CLI
      run: |
        ert --help

    - name: Test docs
      if: matrix.os == 'ubuntu-latest' && contains(fromJSON('[3.8, 3.9]'), matrix.python-version)
      run: |
        sphinx-build -n -v -E -W ./docs/rst/manual ./tmp/ert_docs

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-test-cmake, build-wheels]

    # If this is a tagged release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - name: Get wheels
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Move to dist/
        run: |
          mkdir dist
          find artifacts -name "*.whl" -exec mv '{}' dist/ \;

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.3.1
        with:
          user: statoil-travis
          password: ${{ secrets.pypi_password }}
