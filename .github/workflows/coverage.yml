name: Python coverage

on:
 push:
   branches:
     - main
     - 'version-**'
   tags: "*"
 pull_request:

jobs:
  python-test-coverage:
    name: Python Coverage
    timeout-minutes: 40
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-type: ['integration-tests', 'unit-tests', 'gui-tests']
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true
        lfs: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: "pip"
        cache-dependency-path: |
          pyproject.toml

    - name: Install with dependencies
      run: |
        pip install ".[dev]"

    - name: Test GUI
      if: matrix.test-type == 'gui-tests'
      run: |
        pytest tests/ --cov=ert -m "requires_window_manager" --cov-report=xml:cov.xml -s -vv

    - name: Test Integration
      if: matrix.test-type == 'integration-tests'
      run: |
        pytest tests/ -n 4 --cov=ert -m "integration_test" --cov-report=xml:cov.xml

    - name: Test units
      if: matrix.test-type == 'unit-tests'
      run: |
        pytest tests/unit_tests -n 4 --cov=ert -m "not integration_test and not requires_window_manager" --cov-report=xml:cov.xml --dist loadgroup

    - name: Upload python coverage to Codecov
      uses: codecov/codecov-action@v4
      id: codecov1
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        files: cov.xml
    - name: codecov retry sleep
      if: steps.codecov1.outcome == 'failure'
      run: |
        sleep 30
    - name: Codecov retry
      uses: codecov/codecov-action@v4
      if: steps.codecov1.outcome == 'failure'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        files: cov.xml
